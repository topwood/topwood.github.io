<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[node-call-dll]]></title>
      <url>http://www.18710847003.com/2015/11/26/node-call-dll/</url>
      <content type="html"><![CDATA[<h1 id="研究在Node中如何调用dll">研究在Node中如何调用dll</h1><h2 id="背景">背景</h2><p>根据项目需要，我们会有一个vs（2010/2013）生成的dll，在我们的Node服务器上调用，该dll中有一个主要的函数为’getTile’，用来返回某个瓦片（本质是一张图片），该dll由别的单位合作完成，我们只负责调用。getTile函数大概长这样：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * id: 字符串，图层名</span><br><span class="line"> * x，y，z: 瓦片坐标</span><br><span class="line"> * len: buffer长度</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">EXPORT <span class="keyword">char</span>* <span class="title">getTile</span><span class="params">(<span class="keyword">char</span>* id,<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> l,<span class="keyword">int</span>* len)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//此处是别人的逻辑代码，这里用打开文件模拟。</span></span><br><span class="line">	FILE *fin = fopen(<span class="string">"a.jpg"</span>, <span class="string">"rb"</span>);</span><br><span class="line">	<span class="keyword">char</span>* buf = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">	*len = fread(buf, <span class="number">1</span>, <span class="number">1024</span>*<span class="number">1024</span>, fin);</span><br><span class="line">	<span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们两方的平台（操作系统和vs）应该是一致的。</p>
<h2 id="方案">方案</h2><ol>
<li><p>原生模块法<br>用c++编写Node原生模块，在原生模块里面调用人家的dll。等于是在人家的dll外面再封装一层。该方法需要学习一下如何编写原生模块(addon)。</p>
</li>
<li><p>借助<a href="https://github.com/node-ffi/node-ffi" target="_blank" rel="external">node-fii</a><br>该方法虽然调用简单，但是实际使用起来坑比较多。也有环境的<a href="https://github.com/nodejs/node-gyp#installation" target="_blank" rel="external">依赖</a>。在node-ffi的目录下有简单的example可以参考。</p>
</li>
<li><p>其他方式（swig..）</p>
</li>
</ol>
<h2 id="任务">任务</h2><p>在本地自己写一个测试代码，生成一个dll,在Node环境中成功调用该dll.</p>
<h2 id="遇到的问题">遇到的问题</h2><p>目前使用node-ffi调用dll，遇到调用失败的问题。<br>以下是测试过程:<br><a href="https://cnodejs.org/topic/56570ec1b1e04fda51bcdf51" target="_blank" rel="external">https://cnodejs.org/topic/56570ec1b1e04fda51bcdf51</a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.c</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"add.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add.h</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"add.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我用vs自带的命令行工具，参考node-ffi的example，<code>cl.exe /D_USRDLL /D_WINDLL F:\TestSpace\ffi\test\add.c /link /DLL /OUT:F:\TestSpace\ffi\test\add.dll</code> 这样生成的dll在node里面用ffi调用是没问题的，正确输出了6：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">var</span> ffi = <span class="built_in">require</span>(<span class="string">'ffi'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> libm = ffi.Library(__dirname+<span class="string">'\\add.dll'</span>, &#123;</span><br><span class="line">  <span class="string">'add'</span>: [ <span class="string">'int'</span>, [ <span class="string">'int'</span>,<span class="string">'int'</span> ] ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> a = libm.add(<span class="number">1</span>,<span class="number">5</span>); <span class="comment">// 输出6</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>
<p>但是我用VS IDE新建dll项目生成出来的Dll,用上面的方法调的时候，出现了这样的错误提示：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test&gt;node app.js</span><br><span class="line"></span><br><span class="line"><span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test\node_modules\ffi\<span class="class"><span class="keyword">lib</span>\<span class="title">dynamic_library</span>.<span class="title">js</span>:74</span></span><br><span class="line">    throw new <span class="constant">Error</span>(<span class="string">'Dynamic Linking Error: '</span> + err)</span><br><span class="line">          ^</span><br><span class="line"><span class="constant">Error</span>: <span class="constant">Dynamic</span> <span class="constant">Linking</span> <span class="constant">Error</span>: <span class="constant">Win32</span> error <span class="number">193</span></span><br><span class="line">    at new <span class="constant">DynamicLibrary</span> (<span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test\node_modules\ffi\<span class="class"><span class="keyword">lib</span>\<span class="title">dynamic_li</span></span></span><br><span class="line">brary.<span class="symbol">js:</span><span class="number">74</span>:<span class="number">11</span>)</span><br><span class="line">    at <span class="constant">Object</span>.<span class="constant">Library</span> (<span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test\node_modules\ffi\<span class="class"><span class="keyword">lib</span>\<span class="title">library</span>.<span class="title">js</span>:45:</span></span><br><span class="line"><span class="number">12</span>)</span><br><span class="line">    at <span class="constant">Object</span>.&lt;anonymous&gt; (<span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test\app.<span class="symbol">js:</span><span class="number">3</span>:<span class="number">16</span>)</span><br><span class="line">    at <span class="constant">Module</span>._compile (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:456:26)</span></span><br><span class="line">    at <span class="constant">Object</span>.<span class="constant">Module</span>._extensions..js (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:474:10)</span></span><br><span class="line">    at <span class="constant">Module</span>.load (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:356:32)</span></span><br><span class="line">    at <span class="constant">Function</span>.<span class="constant">Module</span>._load (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:312:12)</span></span><br><span class="line">    at <span class="constant">Function</span>.<span class="constant">Module</span>.runMain (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:497:10)</span></span><br><span class="line">    at startup (node.<span class="symbol">js:</span><span class="number">119</span>:<span class="number">16</span>)</span><br><span class="line">    at node.<span class="symbol">js:</span><span class="number">935</span>:<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>我在node-ffi的issue里提了一个<a href="https://github.com/node-ffi/node-ffi/issues/237" target="_blank" rel="external">问题</a>,作者说我编译生成dll的时候出问题了，应该是我用VS的方式有问题，难道不是新建一个空的dll项目然后生成解决方案？<br>跪求高手解救。。</p>
<h2 id="解决方法">解决方法</h2><p>原来我在VS中创建的项目是win32项目，必须将项目设置为x64项目。我的机器是win7 64位，Node是0.10.40的64位。改变设置之后，生成的dll能与使用cl.exe v64生成的一样在Node中成功调用。纠结了这么久，终于。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[todo-list]]></title>
      <url>http://www.18710847003.com/2015/10/25/todo-list/</url>
      <content type="html"><![CDATA[<h2 id="学习ES6">学习ES6</h2><p><a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="external">阮一峰的博客</a><br>最新版的node4.x貌似支持es6语法</p>
<h2 id="学习Sass">学习Sass</h2><p><a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="external">w3cplus</a><br><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="external">阮一峰的博客</a></p>
<h2 id="webpack">webpack</h2><h2 id="react">react</h2><h2 id="gulp">gulp</h2><h2 id="CSS">CSS</h2><p>具备将一张psd图转化成html+css代码的能力</p>
]]></content>
    </entry>
    
  
  
</search>
