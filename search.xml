<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[node中的chunked-transfer]]></title>
      <url>http://www.18710847003.com/2015/12/12/node-chunked-transfer/</url>
      <content type="html"><![CDATA[<h2 id="http协议中的transfer-encoding">http协议中的transfer-encoding</h2><blockquote>
<p>Transfer-Encoding，是一个 HTTP 头部字段，字面意思是「传输编码」。实际上，HTTP 协议中还有另外一个头部与编码有关：Content-Encoding（内容编码）。Content-Encoding 通常用于对实体内容进行压缩编码，目的是优化传输，例如用 gzip 压缩文本文件，能大幅减小体积。内容编码通常是选择性的，例如 jpg / png 这类文件一般不开启，因为图片格式已经是高度压缩过的，再压一遍没什么效果不说还浪费 CPU。</p>
<p>而 Transfer-Encoding 则是用来改变报文格式，它不但不会减少实体内容传输大小，甚至还会使传输变大，那它的作用是什么呢？本文接下来主要就是讲这个。我们先记住一点，Content-Encoding 和 Transfer-Encoding 二者是相辅相成的，对于一个 HTTP 报文，很可能同时进行了内容编码和传输编码。</p>
</blockquote>
<h2 id="Persistent_Connection">Persistent Connection</h2><p>暂时把 Transfer-Encoding 放一边，我们来看 HTTP 协议中另外一个重要概念：Persistent Connection（持久连接，通俗说法长连接）。我们知道 HTTP 运行在 TCP 连接之上，自然也有着跟 TCP 一样的三次握手、慢启动等特性，为了尽可能的提高 HTTP 性能，使用持久连接就显得尤为重要了。为此，HTTP 协议引入了相应的机制。</p>
<p>HTTP/1.0 的持久连接机制是后来才引入的，通过 Connection: keep-alive 这个头部来实现，服务端和客户端都可以使用它告诉对方在发送完数据之后不需要断开 TCP 连接，以备后用。HTTP/1.1 则规定所有连接都必须是持久的，除非显式地在头部加上 Connection: close 。所以实际上，HTTP/1.1 中 Connection 这个头部字段已经没有 keep-alive 这个取值了，但由于历史原因，很多 Web Server 和浏览器，还是保留着给 HTTP/1.1 长连接发送 Connection: keep-alive 的习惯。</p>
<p>浏览器重用已经打开的空闲持久连接，可以避开缓慢的三次握手，还可以避免遇上 TCP 慢启动的拥塞适应阶段，听起来十分美妙。为了深入研究持久连接的特性，我决定用 Node 写一个最简单的 Web Server 用于测试，Node 提供了 http 模块用于快速创建 HTTP Web Server，但我需要更多的控制，所以用 net 模块创建了一个 TCP Server：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">require(<span class="string">'net'</span>).createServer(<span class="function"><span class="keyword">function</span><span class="params">(sock)</span> &#123;</span></span><br><span class="line">  sock.<span class="keyword">on</span>(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> &#123;</span></span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'HTTP/1.1 200 OK\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'hello world!'</span>);</span><br><span class="line">    sock.destroy();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(<span class="number">9090</span>, <span class="string">'127.0.0.1'</span>);</span><br></pre></td></tr></table></figure>
<p>启动服务后，在浏览器里访问 127.0.0.1:9090，正确输出了指定内容，一切正常。去掉 sock.destroy() 这一行，让它变成持久连接，重启后再访问一下。这次的结果就有点奇怪了：迟迟看不到输出，通过 Network 查看请求状态，一直是 pending。</p>
<p>这是因为，对于非持久连接，浏览器可以通过连接是否关闭来界定请求或响应实体的边界；而对于持久连接，这种方法显然不奏效。上例中，尽管我已经发送完所有数据，但浏览器并不知道这一点，它无法得知这个打开的连接上是否还会有新数据进来，只能傻傻地等了。</p>
<h2 id="Content-Length">Content-Length</h2><p>要解决上面这个问题，最容易想到的办法就是计算实体长度，并通过头部告诉对方。这就要用到 Content-Length 了，改造一下上面的例子：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">require(<span class="string">'net'</span>).createServer(<span class="function"><span class="keyword">function</span><span class="params">(sock)</span> &#123;</span></span><br><span class="line">  sock.<span class="keyword">on</span>(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> &#123;</span></span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'HTTP/1.1 200 OK\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'Content-Length: 12\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'hello world!'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(<span class="number">9090</span>, <span class="string">'127.0.0.1'</span>);</span><br></pre></td></tr></table></figure></p>
<p>可以看到，这次发送完数据并没有关闭 TCP 连接，但浏览器能正常输出内容，结束请求，因为浏览器可以通过 Content-Length 的长度信息，判断出响应实体已结束。那如果 Content-Length 和实体实际长度不一致会怎样？有兴趣的同学可以自己试试，通常如果 Content-Length 比实际长度短，会造成内容被截断；如果比实体内容长，会造成 pending。</p>
<p>由于 Content-Length 字段必须真实反映实体长度，但实际应用中，有些时候实体长度并没那么好获得，例如实体来自于网络文件，或者由动态语言生成。这时候要想准确获取长度，只能开一个足够大的 buffer，等内容全部生成好再计算。但这样做一方面需要更大的内存开销，另一方面也会让客户端等更久。</p>
<p>我们在做 WEB 性能优化时，有一个重要的指标叫 TTFB（Time To First Byte），它代表的是从客户端发出请求到收到响应的第一个字节所花费的时间。大部分浏览器自带的 Network 面板都可以看到这个指标，越短的 TTFB 意味着用户可以越早看到页面内容，体验越好。可想而知，服务端为了计算响应实体长度而缓存所有内容，跟更短的 TTFB 理念背道而驰。但在 HTTP 报文中，实体一定要在头部之后，顺序不能颠倒，为此我们需要一个新的机制：不依赖头部的长度信息，也能知道实体的边界。</p>
<h2 id="Transfer-Encoding:_chunked">Transfer-Encoding: chunked</h2><p>本文主角终于再次出现了， Transfer-Encoding 正是用来解决上面这个问题的。历史上 Transfer-Encoding 可以有多种取值，为此还引入了一个名为 TE 的头部用来协商采用何种传输编码。但是最新的 HTTP 规范里，只定义了一种编码传输：分块编码（chunked）。</p>
<p>分块编码相当简单，在头部加入 Transfer-Encoding: chunked 之后，就代表这个报文采用了分块编码。这时，报文中的实体需要改为用一系列分块来传输。每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括它结尾的 CRLF（\r\n），也不包括分块数据结尾的 CRLF。最后一个分块长度值必须为 0，对应的分块数据没有内容，表示实体结束。按照这个格式改造下之前的代码：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">require(<span class="string">'net'</span>).createServer(<span class="function"><span class="keyword">function</span><span class="params">(sock)</span> &#123;</span></span><br><span class="line">    sock.<span class="keyword">on</span>(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span><span class="params">(data)</span> &#123;</span></span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'HTTP/1.1 200 OK\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'Transfer-Encoding: chunked\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'b\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'01234567890\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'5\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'12345\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'0\r\n'</span>);</span><br><span class="line">    sock.<span class="keyword">write</span>(<span class="string">'\r\n'</span>); //结束</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).listen(<span class="number">9090</span>, <span class="string">'127.0.0.1'</span>);</span><br></pre></td></tr></table></figure></p>
<p>上面这个例子中，我在响应头中表明接下来的实体会采用分块编码，然后输出了 11 字节的内容，接着又输出了 5 字节内容，最后用一个 0 长度的分块表明数据已经传完了。用浏览器访问这个服务，可以得到正确结果。可以看到，通过这种简单的分块策略，很好的解决了前面提出的问题。</p>
<p>前面说过 Content-Encoding 和 Transfer-Encoding 二者经常会结合来用，其实就是针对 Transfer-Encoding 的分块再进行 Content-Encoding。</p>
<h2 id="Bigpipe">Bigpipe</h2><ul>
<li>是一种不局限于语言的前后端整合技术方案</li>
<li>由Facebook首创</li>
<li>适合比较大型的，需要大量服务器运算的站点</li>
<li>有效减少HTTP请求</li>
<li>兼容多浏览器</li>
</ul>
<h3 id="一个实例">一个实例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">var http = require('http');</span><br><span class="line"></span><br><span class="line">var server = http.createServer(function(req, res) &#123;</span><br><span class="line"></span><br><span class="line">    res.writeHead(200, &#123;</span><br><span class="line">       'Content-Type' : 'text/html',</span><br><span class="line">        'Transfer-Encoding' : 'chunked'</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.write([</span><br><span class="line">        '<span class="doctype">&lt;!DOCTYPE html&gt;</span>',</span><br><span class="line">        '<span class="tag">&lt;<span class="title">html</span>&gt;</span>',</span><br><span class="line">        '<span class="tag">&lt;<span class="title">head</span>&gt;</span>',</span><br><span class="line">        '<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span>',</span><br><span class="line">        '<span class="tag">&lt;<span class="title">title</span>&gt;</span>Node.js Bigpipe Demo<span class="tag">&lt;/<span class="title">title</span>&gt;</span>',</span><br><span class="line">        '<span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">',</span><br><span class="line">        ' * <span class="rules">&#123;<span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">0</span></span></span>;&#125;</span>',</span><br><span class="line">        ' <span class="tag">body</span> <span class="rules">&#123;<span class="rule"><span class="attribute">background-color</span>:<span class="value"><span class="hexcolor">#fff</span></span></span>;&#125;</span>',</span><br><span class="line">        ' <span class="tag">div</span><span class="rules">&#123;<span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">2px</span> solid <span class="hexcolor">#4F81BD</span></span></span>; <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">30px</span></span></span>; <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;&#125;</span>',</span><br><span class="line">        ' <span class="tag">p</span> <span class="rules">&#123;<span class="rule"><span class="attribute">word-wrap</span>:<span class="value">break-wrod</span></span>; <span class="rule"><span class="attribute">word-break</span>:<span class="value">break-all</span></span>; <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#666</span></span></span>;&#125;</span>',</span><br><span class="line">        ' <span class="class">.red</span> <span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#f00</span></span></span>;&#125;</span>',</span><br><span class="line">        ' <span class="class">.blue</span> <span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value">blue</span></span>;&#125;</span>',</span><br><span class="line">        ' <span class="class">.green</span> <span class="rules">&#123;<span class="rule"><span class="attribute">color</span>:<span class="value">green</span></span>;&#125;</span>',</span><br><span class="line">        '</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>',</span><br><span class="line">        '<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="undefined">',</span><br><span class="line">        'var g_startTime = new Date();',</span><br><span class="line">        'var g_renderArr = []',</span><br><span class="line">        'function render(nodeID,html)&#123;',</span><br><span class="line">        '   g_renderArr.push(new Date())',</span><br><span class="line">        '    document.getElementById(nodeID).innerHTML=html;',</span><br><span class="line">        '&#125;',</span><br><span class="line">        '</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>',</span><br><span class="line">        '<span class="tag">&lt;/<span class="title">head</span>&gt;</span>',</span><br><span class="line">        '<span class="tag">&lt;<span class="title">body</span>&gt;</span>',</span><br><span class="line">        '<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"header"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>',</span><br><span class="line">        '<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"content"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>',</span><br><span class="line">        '<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"footer"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>'</span><br><span class="line">    ].join('\r\n'));</span><br><span class="line"></span><br><span class="line">    function out_header() &#123;</span><br><span class="line">        res.write("<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">'text/javascript'</span>&gt;</span><span class="handlebars"><span class="xml">render('header', '<span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">\"blue\"</span>&gt;</span>111111<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>');</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>\r\n");</span><br><span class="line"></span><br><span class="line">        setTimeout(out_content, 4 * 1000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function out_content() &#123;</span><br><span class="line">        res.write("<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">'text/javascript'</span>&gt;</span><span class="handlebars"><span class="xml">render('content', '<span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">\"red\"</span>&gt;</span>222222<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>');</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>\r\n");</span><br><span class="line"></span><br><span class="line">        setTimeout(out_footer, 6 * 1000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function out_footer() &#123;</span><br><span class="line">        res.write("<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">'text/javascript'</span>&gt;</span><span class="handlebars"><span class="xml">render('footer', '<span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">\"green\"</span>&gt;</span>333333<span class="tag">&lt;/<span class="title">span</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>');</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>\r\n");</span><br><span class="line"></span><br><span class="line">        setTimeout(out_end, 1 * 1000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function out_end() &#123;</span><br><span class="line"></span><br><span class="line">        res.write([</span><br><span class="line">            '<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="undefined">',</span><br><span class="line">            'var str = [',</span><br><span class="line">            '    "start:" + g_startTime.toGMTString(),',</span><br><span class="line">            '    "header:" + g_renderArr[0].toGMTString() + "-" + (g_renderArr[0] - g_startTime) / 1000,',</span><br><span class="line">            '    "content:" + g_renderArr[1].toGMTString() + "-" + (g_renderArr[1] - g_renderArr[0]) / 1000,',</span><br><span class="line">            '    "footer:" + g_renderArr[2].toGMTString() + "-" + (g_renderArr[2] - g_renderArr[1]) / 1000,',</span><br><span class="line">            '    "end:" + new Date().toGMTString() + "-" + (new Date() - g_renderArr[2]) / 1000 + "-" + (new Date() - g_startTime) / 1000',</span><br><span class="line">            '].join("\\n");',</span><br><span class="line">            'alert(str);',</span><br><span class="line">            '</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>'</span><br><span class="line">        ].join(''));</span><br><span class="line"></span><br><span class="line">        res.end("\r\n<span class="tag">&lt;/<span class="title">body</span>&gt;</span><span class="tag">&lt;/<span class="title">html</span>&gt;</span>");</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setTimeout(out_header, 2 * 1000);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).listen(3002);</span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="http://7te95y.com1.z0.glb.clouddn.com/bigpipe.gif" alt="效果图"></p>
<p>response headers:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">Connection</span><span class="symbol">:keep-alive</span></span><br><span class="line"><span class="constant">Content</span>-<span class="constant">Type</span><span class="symbol">:text/html</span></span><br><span class="line"><span class="constant">Date</span><span class="symbol">:Sat</span>, <span class="number">12</span> <span class="constant">Dec</span> <span class="number">2015</span> <span class="number">04</span><span class="symbol">:</span><span class="number">35</span><span class="symbol">:</span>09 <span class="constant">GMT</span></span><br><span class="line"><span class="constant">Transfer</span>-<span class="constant">Encoding</span><span class="symbol">:chunked</span></span><br></pre></td></tr></table></figure></p>
<p>因为nodejs天生的异步非阻塞的特点，所以利用bigpipe方式可以有效的解决页面初始化空白的问题,而且哪怕页面内有多个数据加载的部分也可以有效的解决.</p>
<h2 id="总结">总结</h2><p>Transfer-Encoding:chunked是http的一种分块传输方式;bigpipe能够有效的解决重数据页面的加载问题,这个比ajax异步加载的好处就是利用一个http连接就能解决多数据加载的问题,相比一个连接一个ajax的方式明显能提高不少服务器端性能.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[爬取doufm歌曲数据]]></title>
      <url>http://www.18710847003.com/2015/12/10/doufm-download-songs/</url>
      <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>doufm是由某某大神建立在校内的一个fm网站，上面的歌曲很耐听，导致我经常在上面听歌。毕业季将至，在校外是访问不到的，所以觉得可以down下上面的所有歌曲，在bt上分享给校友。还有，校园网无需登录就能听歌。<br><img src="http://7te95y.com1.z0.glb.clouddn.com/doufm.png" alt="doufm"></p>
<h2 id="分析">分析</h2><p>用Chrome简单看了下网站的前端代码。发现是用Angular1.x做框架的。分析了下请求的链接、返回的结构，有这两个比较重要的api:<br><a id="more"></a></p>
<h3 id="请求播放频道">请求播放频道</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/doufm.info/api</span><span class="regexp">/playlist/</span>?</span><br></pre></td></tr></table></figure>
<p>返回值<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "<span class="attribute">key</span>": <span class="value"><span class="string">"52f8ca1d1d41c851663fcba7"</span></span>, </span><br><span class="line">        "<span class="attribute">music_list</span>": <span class="value"><span class="number">3726</span></span>, </span><br><span class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"\u534e\u8bed"</span></span><br><span class="line">    </span>&#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        "<span class="attribute">key</span>": <span class="value"><span class="string">"52f8ca1d1d41c851663fcba8"</span></span>, </span><br><span class="line">        "<span class="attribute">music_list</span>": <span class="value"><span class="number">2451</span></span>, </span><br><span class="line">        "<span class="attribute">name</span>": <span class="value"><span class="string">"\u6b27\u7f8e"</span></span><br><span class="line">    </span>&#125;,</span><br><span class="line">    ....</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>哦好，一共有这么多频道，每个频道的歌曲数目有”music_list”那么多个，名字一眼看不出来，没关系，放到chrome的console里面，toString()一下！</p>
<h3 id="请求歌曲列表">请求歌曲列表</h3><p>由于网站上每次只请求10个歌曲，10个播完了再去请求另外10个，这样比较科学。</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/doufm.info/api</span><span class="regexp">/playlist/</span><span class="number">52</span>f8ca1d1d41c851663fcba7/?num=<span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>不难发现52f8ca1d1d41c851663fcba7就是上面的频道的Key啦。默认的值是华语的那个key。<br>好的，我把num设置成10000！<br>返回：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "<span class="attribute">album</span>": <span class="value"><span class="string">"\u534a\u516c\u5f00\u7684\u79d8\u5bc6"</span></span>, </span><br><span class="line">        "<span class="attribute">artist</span>": <span class="value"><span class="string">"\u6cf3\u513f"</span></span>, </span><br><span class="line">        "<span class="attribute">audio</span>": <span class="value"><span class="string">"/api/fs/52fed50d1d41c80a7e60923e/"</span></span>, </span><br><span class="line">        "<span class="attribute">company</span>": <span class="value"><span class="string">"EMI"</span></span>, </span><br><span class="line">        "<span class="attribute">cover</span>": <span class="value"><span class="string">"/api/fs/52fed50d1d41c80a7e60923c/"</span></span>, </span><br><span class="line">        "<span class="attribute">kbps</span>": <span class="value"><span class="string">"64"</span></span>, </span><br><span class="line">        "<span class="attribute">key</span>": <span class="value"><span class="string">"52fed5131d41c80a7e609247"</span></span>, </span><br><span class="line">        "<span class="attribute">public_time</span>": <span class="value"><span class="string">"2011"</span></span>, </span><br><span class="line">        "<span class="attribute">title</span>": <span class="value"><span class="string">"\u767e\u53d8\u5973\u738b"</span></span>, </span><br><span class="line">        "<span class="attribute">upload_date</span>": <span class="value"><span class="string">"Sat, 15 Feb 2014 10:46:43 -0000"</span></span><br><span class="line">    </span>&#125;, </span><br><span class="line">    ....</span><br></pre></td></tr></table></figure></p>
<p>好吧，这些字段的意思都相当明显了，看到这里几乎就知道该怎么下了，关键是那个audio字段。一看请求，发现果然会去请求那个audio<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/doufm.info/api</span><span class="regexp">/fs/</span><span class="number">52</span>fed50d1d41c80a7e60923e/</span><br></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//response headers</span></span><br><span class="line">Connection:keep-alive</span><br><span class="line">Content-Length:<span class="number">2083968</span></span><br><span class="line">Content-Type:application/octet-stream</span><br><span class="line">Date:Thu, <span class="number">10</span> Dec <span class="number">2015</span> <span class="number">01</span>:<span class="number">15</span>:<span class="number">53</span> GMT</span><br><span class="line">Server:nginx/<span class="number">1.4</span><span class="number">.7</span></span><br></pre></td></tr></table></figure>
<p>明显这个就是一个歌曲嘛，好的，爬它！其他的东西有cover什么的，不需要了，我只要歌曲和它的title用来当做文件名存。</p>
<h2 id="Request模块">Request模块</h2><blockquote>
<p>一个HTTP客户端库</p>
</blockquote>
<p>当然我是用Node来爬数据了，选择了Requset。pipe()相当好用啊！<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (songs.length) &#123;</span><br><span class="line">	<span class="keyword">var</span> song = songs.pop();</span><br><span class="line">	<span class="keyword">var</span> name = song.title;</span><br><span class="line">	<span class="keyword">var</span> url = baseurl + song.audio;</span><br><span class="line">	<span class="keyword">var</span> ws = fs.createWriteStream(<span class="keyword">dir</span> + name+<span class="string">".mp3"</span>);</span><br><span class="line">	ws.<span class="keyword">on</span>('<span class="keyword">error</span>',function (<span class="keyword">err</span>) &#123;</span><br><span class="line">		console.<span class="literal">log</span>(<span class="keyword">err</span>);</span><br><span class="line">	&#125;)</span><br><span class="line">	request(url).<span class="keyword">on</span>('<span class="keyword">error</span>', function(<span class="keyword">e</span>) &#123;</span><br><span class="line">		console.<span class="literal">log</span>(<span class="keyword">e</span>);</span><br><span class="line">	&#125;).pipe(ws);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好的，大概就这样的代码。哇靠，好简单，是啊，没什么技术含量的。</p>
<h2 id="遇到的坑">遇到的坑</h2><p>当然我主要是想记录下遇到的坑咯。</p>
<h3 id="文件名">文件名</h3><p>有的歌曲文件名（title）里面带有一些特殊字符<br>比如： ‘?’ 和 ‘/‘ 之类的，在调用fs.createWriteStream时报错！<br>原因在于，windows的文件名不允许有这种字符！<br>解决方法：<br>正则比配，将有特殊字符的song.name给替换了。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name.replace(<span class="string">'/\//'</span>,<span class="string">''</span>).replace(<span class="string">'/\?/'</span>,<span class="string">''</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="捕获stream的错误">捕获stream的错误</h3><p>由于上面的调用createWriteStream时报错，一开始想捕获一下错误看看是啥，于是写了一个时报错，一开始想捕获一下错误看看是啥，于是写了一个<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>结果发现并没有什么软用，捕获不到错误!搜搜搜！<br>原来createWriteStream是个异步方法，try、catch捕获不了啊！看了下stream都继承了EventEmitter,有一些特定的响应事件的，就用这个：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ws</span>.<span class="keyword">on</span>(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span> <span class="params">(err)</span> &#123;</span></span><br><span class="line">		console.<span class="built_in">log</span>(err);</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="歌曲重名">歌曲重名</h3><p>下了一个频道的歌曲之后发现，咦，怎么比列表上的少，哦，原来是歌曲有可能重名的。<br>解决的方法也蛮多的。<br>我的做法是先做一步预处理，将同名的歌曲都找出来，改改名。比如一个叫a.mp3，有重名的以后就叫a1.mp3、a2.mp3。一次类推。</p>
<h2 id="结果">结果</h2><p>下载了大概40G的歌曲，一共将近2w多个歌。亲测可用！</p>
<h2 id="不足">不足</h2><p>下载到的歌在windows下面。<br><img src="http://7te95y.com1.z0.glb.clouddn.com/doufm_songs.png" alt="songs"><br>没有作者信息，流派信息，专辑信息等等。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GIS常用库（web前端）]]></title>
      <url>http://www.18710847003.com/2015/12/09/gis-useful-libs/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="http://openlayers.org/" target="_blank" rel="external">openlayers3/ol3</a><br><a href="http://cesiumjs.org" target="_blank" rel="external">Cesium.js</a></p>
</blockquote>
<a id="more"></a>
<h2 id="openlayers3/ol3">openlayers3/ol3</h2><blockquote>
<p>A high-performance, feature-packed library for all your mapping needs.</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.<span class="built_in">Map</span>(&#123;</span><br><span class="line">  layers: [</span><br><span class="line">    <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">      source: <span class="keyword">new</span> ol.source.OSM()</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  target: <span class="string">'map'</span>,</span><br><span class="line">  controls: ol.control.defaults(&#123;</span><br><span class="line">    attributionOptions: <span class="comment"><span class="markdown">/<span class="emphasis">** @type &#123;olx.control.AttributionOptions&#125; *</span>/</span></span> (&#123;</span><br><span class="line">      collapsible: <span class="keyword">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">  view: <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">    center: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    zoom: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>ol3的一些概念（map/view/layer/source…）更贴近GIS中的一些概念。ol3使用goog实现模块化和构建。</p>
<h2 id="Cesium-js">Cesium.js</h2><blockquote>
<p>An open-source JavaScript library for world-class 3D globes and maps</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> viewer = <span class="keyword">new</span> Cesium.Viewer(<span class="string">'cesiumContainer'</span>);</span><br></pre></td></tr></table></figure>
<p>Cesium用require实现模块化。</p>
<h2 id="Cesium与ol3有一些不同点：">Cesium与ol3有一些不同点：</h2><ol>
<li>Cesium的概念没有很贴合GIS中的概念。</li>
<li>ol3只有2D地图，cesium有2D/2.5D/3D。</li>
<li>Cesium支持自己定义的动态czml格式。</li>
</ol>
<h2 id="共同点：">共同点：</h2><p>文档、example都相当齐全,新版本频繁迭代。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Node的一些常用的模块(不定时更新)]]></title>
      <url>http://www.18710847003.com/2015/12/09/nodejs-useful-modules/</url>
      <content type="html"><![CDATA[<blockquote>
<p>PM2<br>Express<br>Loadash<br>Q<br>Request<br>Bluebird<br>EventProxy<br>node-webkit<br>http-server</p>
</blockquote>
<a id="more"></a>
<h2 id="PM2"><a href="https://github.com/Unitech/pm2" target="_blank" rel="external">PM2</a></h2><blockquote>
<p>PM2是一个带有负载均衡功能的Node应用的进程管理器。当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。</p>
</blockquote>
<p>常用功能：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js[ --name my-api] <span class="preprocessor"># 启动start.js后台进程[,命名进程为my-api]</span></span><br><span class="line">pm2 <span class="built_in">list</span>               <span class="preprocessor"># 显示所有进程状态</span></span><br><span class="line">pm2 monit              <span class="preprocessor"># 监视所有进程</span></span><br><span class="line">pm2 logs               <span class="preprocessor">#  显示所有进程日志</span></span><br><span class="line">pm2 stop all           <span class="preprocessor"># 停止所有进程</span></span><br><span class="line">pm2 restart all        <span class="preprocessor"># 重启所有进程</span></span><br><span class="line">pm2 reload all         <span class="preprocessor"># <span class="number">0</span>秒停机重载进程 (用于 NETWORKED 进程)</span></span><br><span class="line">pm2 stop <span class="number">0</span>             <span class="preprocessor"># 停止指定的进程</span></span><br><span class="line">pm2 restart <span class="number">0</span>          <span class="preprocessor"># 重启指定的进程</span></span><br><span class="line">pm2 startup            <span class="preprocessor"># 产生 init 脚本 保持进程活着</span></span><br><span class="line">pm2 web                <span class="preprocessor"># 运行健壮的 computer API endpoint (http:<span class="comment">//domain:9615)</span></span></span><br><span class="line">pm2 <span class="keyword">delete</span> <span class="number">0</span>           <span class="preprocessor"># 杀死指定的进程</span></span><br><span class="line">pm2 <span class="keyword">delete</span> all         <span class="preprocessor"># 杀死全部进程</span></span><br></pre></td></tr></table></figure></p>
<p>类似功能的有forver,supervisor</p>
<h2 id="Express"><a href="https://github.com/strongloop/express" target="_blank" rel="external">Express</a></h2><blockquote>
<p>一个强大的后端框架，是目前Node最火的后端框架了吧。</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = require(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>以上代码简简单单搭建一个服务器！</p>
<h2 id="Loadash">Loadash</h2><blockquote>
<p>一个常用的js库，类似于underscore</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_.assign(&#123; <span class="string">'a'</span>: <span class="number">1</span> &#125;, &#123; <span class="string">'b'</span>: <span class="number">2</span> &#125;, &#123; <span class="string">'c'</span>: <span class="number">3</span> &#125;);</span><br><span class="line"><span class="comment">// → &#123; 'a': 1, 'b': 2, 'c': 3 &#125;</span></span><br><span class="line">_.<span class="built_in">map</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], function(n) &#123; <span class="keyword">return</span> n * <span class="number">3</span>; &#125;);</span><br><span class="line"><span class="comment">// → [3, 6, 9]</span></span><br></pre></td></tr></table></figure>
<h2 id="Q">Q</h2><blockquote>
<p>一个常用异步promises库，用来解决回调金字塔。</p>
</blockquote>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未使用Q的回调</span></span><br><span class="line">step1(<span class="function"><span class="keyword">function</span> <span class="params">(value1)</span> &#123;</span></span><br><span class="line">    step2(value1, <span class="function"><span class="keyword">function</span><span class="params">(value2)</span> &#123;</span></span><br><span class="line">        step3(value2, <span class="function"><span class="keyword">function</span><span class="params">(value3)</span> &#123;</span></span><br><span class="line">            step4(value3, <span class="function"><span class="keyword">function</span><span class="params">(value4)</span> &#123;</span></span><br><span class="line">                <span class="comment">// Do something with value4 </span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//使用Q后</span></span><br><span class="line"><span class="transposed_variable">Q.</span>fcall(promisedStep1)</span><br><span class="line">.<span class="keyword">then</span>(promisedStep2)</span><br><span class="line">.<span class="keyword">then</span>(promisedStep3)</span><br><span class="line">.<span class="keyword">then</span>(promisedStep4)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(value4)</span> &#123;</span></span><br><span class="line">    <span class="comment">// Do something with value4 </span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">    <span class="comment">// Handle any error from all above steps </span></span><br><span class="line">&#125;)</span><br><span class="line">.done();</span><br></pre></td></tr></table></figure>
<h2 id="Request">Request</h2><blockquote>
<p>一个HTTP客户端库<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line">request(<span class="string">'http://www.google.com'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(body) <span class="comment">// Show the HTML for the Google homepage. </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Bulebird">Bulebird</h2><blockquote>
<p>另一个强大的promise库。</p>
</blockquote>
<h2 id="EventProxy">EventProxy</h2><blockquote>
<p>朴大师写的用事件的思想来解耦异步的库。</p>
</blockquote>
<h2 id="node-webkit">node-webkit</h2><blockquote>
<p>将前后端整合到一起打包成一个桌面应用！</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>x<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    	<span class="comment">// 使用node.js获取系统平台</span></span><br><span class="line">    	<span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line">    	<span class="built_in">document</span>.write(<span class="string">'Our computer is: '</span>, os.platform())</span><br><span class="line">  </span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="http-server">http-server</h2><blockquote>
<p>一个轻量的http服务器<br>我一般直接装在全局<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> <span class="keyword">http</span>-<span class="keyword">server</span></span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>然后在任何目录下都能用hs开服务，-p指定端口。windows小技巧：在一个目录下，按住shift+右键可以在当前目录打开cmd。</p>
<h2 id="说明">说明</h2><p>以上所有模块均可在github或者npm上搜到，故不再给出链接。<br>部分参考自：<br><a href="https://shyling.com/posts/nodejs-useful-module.html" target="_blank" rel="external">shyling的博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[node-call-dll]]></title>
      <url>http://www.18710847003.com/2015/11/26/node-call-dll/</url>
      <content type="html"><![CDATA[<h1 id="研究在Node中如何调用dll">研究在Node中如何调用dll</h1><h2 id="背景">背景</h2><p>根据项目需要，我们会有一个vs（2010/2013）生成的dll，在我们的Node服务器上调用，该dll中有一个主要的函数为’getTile’，用来返回某个瓦片（本质是一张图片），该dll由别的单位合作完成，我们只负责调用。getTile函数大概长这样：</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * id: 字符串，图层名</span><br><span class="line"> * x，y，z: 瓦片坐标</span><br><span class="line"> * len: buffer长度</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">EXPORT <span class="keyword">char</span>* <span class="title">getTile</span><span class="params">(<span class="keyword">char</span>* id,<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> l,<span class="keyword">int</span>* len)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//此处是别人的逻辑代码，这里用打开文件模拟。</span></span><br><span class="line">	FILE *fin = fopen(<span class="string">"a.jpg"</span>, <span class="string">"rb"</span>);</span><br><span class="line">	<span class="keyword">char</span>* buf = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">	*len = fread(buf, <span class="number">1</span>, <span class="number">1024</span>*<span class="number">1024</span>, fin);</span><br><span class="line">	<span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们两方的平台（操作系统和vs）应该是一致的。</p>
<h2 id="方案">方案</h2><ol>
<li><p>原生模块法<br>用c++编写Node原生模块，在原生模块里面调用人家的dll。等于是在人家的dll外面再封装一层。该方法需要学习一下如何编写原生模块(addon)。</p>
</li>
<li><p>借助<a href="https://github.com/node-ffi/node-ffi" target="_blank" rel="external">node-fii</a><br>该方法虽然调用简单，但是实际使用起来坑比较多。也有环境的<a href="https://github.com/nodejs/node-gyp#installation" target="_blank" rel="external">依赖</a>。在node-ffi的目录下有简单的example可以参考。</p>
</li>
<li><p>其他方式（swig..）</p>
</li>
</ol>
<h2 id="任务">任务</h2><p>在本地自己写一个测试代码，生成一个dll,在Node环境中成功调用该dll.</p>
<h2 id="遇到的问题">遇到的问题</h2><p>目前使用node-ffi调用dll，遇到调用失败的问题。<br>以下是测试过程:<br><a href="https://cnodejs.org/topic/56570ec1b1e04fda51bcdf51" target="_blank" rel="external">https://cnodejs.org/topic/56570ec1b1e04fda51bcdf51</a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.c</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"add.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add.h</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"add.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我用vs自带的命令行工具，参考node-ffi的example，<code>cl.exe /D_USRDLL /D_WINDLL F:\TestSpace\ffi\test\add.c /link /DLL /OUT:F:\TestSpace\ffi\test\add.dll</code> 这样生成的dll在node里面用ffi调用是没问题的，正确输出了6：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">var</span> ffi = <span class="built_in">require</span>(<span class="string">'ffi'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> libm = ffi.Library(__dirname+<span class="string">'\\add.dll'</span>, &#123;</span><br><span class="line">  <span class="string">'add'</span>: [ <span class="string">'int'</span>, [ <span class="string">'int'</span>,<span class="string">'int'</span> ] ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> a = libm.add(<span class="number">1</span>,<span class="number">5</span>); <span class="comment">// 输出6</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>
<p>但是我用VS IDE新建dll项目生成出来的Dll,用上面的方法调的时候，出现了这样的错误提示：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test&gt;node app.js</span><br><span class="line"></span><br><span class="line"><span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test\node_modules\ffi\<span class="class"><span class="keyword">lib</span>\<span class="title">dynamic_library</span>.<span class="title">js</span>:74</span></span><br><span class="line">    throw new <span class="constant">Error</span>(<span class="string">'Dynamic Linking Error: '</span> + err)</span><br><span class="line">          ^</span><br><span class="line"><span class="constant">Error</span>: <span class="constant">Dynamic</span> <span class="constant">Linking</span> <span class="constant">Error</span>: <span class="constant">Win32</span> error <span class="number">193</span></span><br><span class="line">    at new <span class="constant">DynamicLibrary</span> (<span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test\node_modules\ffi\<span class="class"><span class="keyword">lib</span>\<span class="title">dynamic_li</span></span></span><br><span class="line">brary.<span class="symbol">js:</span><span class="number">74</span>:<span class="number">11</span>)</span><br><span class="line">    at <span class="constant">Object</span>.<span class="constant">Library</span> (<span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test\node_modules\ffi\<span class="class"><span class="keyword">lib</span>\<span class="title">library</span>.<span class="title">js</span>:45:</span></span><br><span class="line"><span class="number">12</span>)</span><br><span class="line">    at <span class="constant">Object</span>.&lt;anonymous&gt; (<span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test\app.<span class="symbol">js:</span><span class="number">3</span>:<span class="number">16</span>)</span><br><span class="line">    at <span class="constant">Module</span>._compile (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:456:26)</span></span><br><span class="line">    at <span class="constant">Object</span>.<span class="constant">Module</span>._extensions..js (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:474:10)</span></span><br><span class="line">    at <span class="constant">Module</span>.load (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:356:32)</span></span><br><span class="line">    at <span class="constant">Function</span>.<span class="constant">Module</span>._load (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:312:12)</span></span><br><span class="line">    at <span class="constant">Function</span>.<span class="constant">Module</span>.runMain (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:497:10)</span></span><br><span class="line">    at startup (node.<span class="symbol">js:</span><span class="number">119</span>:<span class="number">16</span>)</span><br><span class="line">    at node.<span class="symbol">js:</span><span class="number">935</span>:<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>我在node-ffi的issue里提了一个<a href="https://github.com/node-ffi/node-ffi/issues/237" target="_blank" rel="external">问题</a>,作者说我编译生成dll的时候出问题了，应该是我用VS的方式有问题，难道不是新建一个空的dll项目然后生成解决方案？<br>跪求高手解救。。</p>
<h2 id="解决方法">解决方法</h2><p>原来我在VS中创建的项目是win32项目，必须将项目设置为x64项目。我的机器是win7 64位，Node是0.10.40的64位。改变设置之后，生成的dll能与使用cl.exe v64生成的一样在Node中成功调用。纠结了这么久，终于。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[todo-list]]></title>
      <url>http://www.18710847003.com/2015/10/25/todo-list/</url>
      <content type="html"><![CDATA[<h2 id="学习ES6">学习ES6</h2><p><a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="external">阮一峰的博客</a><br>最新版的node4.x貌似支持es6语法</p>
<h2 id="学习Sass">学习Sass</h2><p><a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="external">w3cplus</a><br><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="external">阮一峰的博客</a></p>
<h2 id="webpack">webpack</h2><h2 id="react">react</h2><h2 id="gulp">gulp</h2><h2 id="CSS">CSS</h2><p>具备将一张psd图转化成html+css代码的能力</p>
]]></content>
    </entry>
    
  
  
</search>
