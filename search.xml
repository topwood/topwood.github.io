<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[GIS常用库（web前端）]]></title>
      <url>http://www.18710847003.com/2015/12/09/gis-useful-libs/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="http://openlayers.org/" target="_blank" rel="external">openlayers3/ol3</a><br><a href="http://cesiumjs.org" target="_blank" rel="external">Cesium.js</a></p>
</blockquote>
<h2 id="openlayers3/ol3">openlayers3/ol3</h2><blockquote>
<p>A high-performance, feature-packed library for all your mapping needs.</p>
</blockquote>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> ol.<span class="built_in">Map</span>(&#123;</span><br><span class="line">  layers: [</span><br><span class="line">    <span class="keyword">new</span> ol.layer.Tile(&#123;</span><br><span class="line">      source: <span class="keyword">new</span> ol.source.OSM()</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  target: <span class="string">'map'</span>,</span><br><span class="line">  controls: ol.control.defaults(&#123;</span><br><span class="line">    attributionOptions: <span class="comment"><span class="markdown">/<span class="emphasis">** @type &#123;olx.control.AttributionOptions&#125; *</span>/</span></span> (&#123;</span><br><span class="line">      collapsible: <span class="keyword">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;),</span><br><span class="line">  view: <span class="keyword">new</span> ol.View(&#123;</span><br><span class="line">    center: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    zoom: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>ol3的一些概念（map/view/layer/source…）更贴近GIS中的一些概念。ol3使用goog实现模块化和构建。</p>
<h2 id="Cesium-js">Cesium.js</h2><blockquote>
<p>An open-source JavaScript library for world-class 3D globes and maps</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> viewer = <span class="keyword">new</span> Cesium.Viewer(<span class="string">'cesiumContainer'</span>);</span><br></pre></td></tr></table></figure>
<p>Cesium用require实现模块化。</p>
<h2 id="Cesium与ol3有一些不同点：">Cesium与ol3有一些不同点：</h2><ol>
<li>Cesium的概念没有很贴合GIS中的概念。</li>
<li>ol3只有2D地图，cesium有2D/2.5D/3D。</li>
<li>Cesium支持自己定义的动态czml格式。</li>
</ol>
<h2 id="共同点：">共同点：</h2><p>文档、example都相当齐全,新版本频繁迭代。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Node的一些常用的模块(不定时更新)]]></title>
      <url>http://www.18710847003.com/2015/12/09/nodejs-useful-modules/</url>
      <content type="html"><![CDATA[<blockquote>
<p>PM2<br>Express<br>Loadash<br>Q<br>Request<br>Bluebird<br>EventProxy<br>node-webkit</p>
</blockquote>
<h2 id="PM2"><a href="https://github.com/Unitech/pm2" target="_blank" rel="external">PM2</a></h2><blockquote>
<p>PM2是一个带有负载均衡功能的Node应用的进程管理器。当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。</p>
</blockquote>
<p>常用功能：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js[ --name my-api] <span class="preprocessor"># 启动start.js后台进程[,命名进程为my-api]</span></span><br><span class="line">pm2 <span class="built_in">list</span>               <span class="preprocessor"># 显示所有进程状态</span></span><br><span class="line">pm2 monit              <span class="preprocessor"># 监视所有进程</span></span><br><span class="line">pm2 logs               <span class="preprocessor">#  显示所有进程日志</span></span><br><span class="line">pm2 stop all           <span class="preprocessor"># 停止所有进程</span></span><br><span class="line">pm2 restart all        <span class="preprocessor"># 重启所有进程</span></span><br><span class="line">pm2 reload all         <span class="preprocessor"># <span class="number">0</span>秒停机重载进程 (用于 NETWORKED 进程)</span></span><br><span class="line">pm2 stop <span class="number">0</span>             <span class="preprocessor"># 停止指定的进程</span></span><br><span class="line">pm2 restart <span class="number">0</span>          <span class="preprocessor"># 重启指定的进程</span></span><br><span class="line">pm2 startup            <span class="preprocessor"># 产生 init 脚本 保持进程活着</span></span><br><span class="line">pm2 web                <span class="preprocessor"># 运行健壮的 computer API endpoint (http:<span class="comment">//domain:9615)</span></span></span><br><span class="line">pm2 <span class="keyword">delete</span> <span class="number">0</span>           <span class="preprocessor"># 杀死指定的进程</span></span><br><span class="line">pm2 <span class="keyword">delete</span> all         <span class="preprocessor"># 杀死全部进程</span></span><br></pre></td></tr></table></figure></p>
<p>类似功能的有forver,supervisor</p>
<h2 id="Express"><a href="https://github.com/strongloop/express" target="_blank" rel="external">Express</a></h2><blockquote>
<p>一个强大的后端框架，是目前Node最火的后端框架了吧。</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = require(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"> </span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>以上代码简简单单搭建一个服务器！</p>
<h2 id="Loadash">Loadash</h2><blockquote>
<p>一个常用的js库，类似于underscore</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_.assign(&#123; <span class="string">'a'</span>: <span class="number">1</span> &#125;, &#123; <span class="string">'b'</span>: <span class="number">2</span> &#125;, &#123; <span class="string">'c'</span>: <span class="number">3</span> &#125;);</span><br><span class="line"><span class="comment">// → &#123; 'a': 1, 'b': 2, 'c': 3 &#125;</span></span><br><span class="line">_.<span class="built_in">map</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], function(n) &#123; <span class="keyword">return</span> n * <span class="number">3</span>; &#125;);</span><br><span class="line"><span class="comment">// → [3, 6, 9]</span></span><br></pre></td></tr></table></figure>
<h2 id="Q">Q</h2><blockquote>
<p>一个常用异步promises库，用来解决回调金字塔。</p>
</blockquote>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未使用Q的回调</span></span><br><span class="line">step1(<span class="function"><span class="keyword">function</span> <span class="params">(value1)</span> &#123;</span></span><br><span class="line">    step2(value1, <span class="function"><span class="keyword">function</span><span class="params">(value2)</span> &#123;</span></span><br><span class="line">        step3(value2, <span class="function"><span class="keyword">function</span><span class="params">(value3)</span> &#123;</span></span><br><span class="line">            step4(value3, <span class="function"><span class="keyword">function</span><span class="params">(value4)</span> &#123;</span></span><br><span class="line">                <span class="comment">// Do something with value4 </span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//使用Q后</span></span><br><span class="line"><span class="transposed_variable">Q.</span>fcall(promisedStep1)</span><br><span class="line">.<span class="keyword">then</span>(promisedStep2)</span><br><span class="line">.<span class="keyword">then</span>(promisedStep3)</span><br><span class="line">.<span class="keyword">then</span>(promisedStep4)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(value4)</span> &#123;</span></span><br><span class="line">    <span class="comment">// Do something with value4 </span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">    <span class="comment">// Handle any error from all above steps </span></span><br><span class="line">&#125;)</span><br><span class="line">.done();</span><br></pre></td></tr></table></figure>
<h2 id="Request">Request</h2><blockquote>
<p>一个HTTP客户端库<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line">request(<span class="string">'http://www.google.com'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(body) <span class="comment">// Show the HTML for the Google homepage. </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Bulebird">Bulebird</h2><blockquote>
<p>另一个强大的promise库。</p>
</blockquote>
<h2 id="EventProxy">EventProxy</h2><blockquote>
<p>朴大师写的用事件的思想来解耦异步的库。</p>
</blockquote>
<h2 id="node-webkit">node-webkit</h2><blockquote>
<p>将前后端整合到一起打包成一个桌面应用！</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>x<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    	<span class="comment">// 使用node.js获取系统平台</span></span><br><span class="line">    	<span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>)</span><br><span class="line">    	<span class="built_in">document</span>.write(<span class="string">'Our computer is: '</span>, os.platform())</span><br><span class="line">  </span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="说明">说明</h2><p>以上所有模块均可在github或者npm上搜到，故不再给出链接。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[node-call-dll]]></title>
      <url>http://www.18710847003.com/2015/11/26/node-call-dll/</url>
      <content type="html"><![CDATA[<h1 id="研究在Node中如何调用dll">研究在Node中如何调用dll</h1><h2 id="背景">背景</h2><p>根据项目需要，我们会有一个vs（2010/2013）生成的dll，在我们的Node服务器上调用，该dll中有一个主要的函数为’getTile’，用来返回某个瓦片（本质是一张图片），该dll由别的单位合作完成，我们只负责调用。getTile函数大概长这样：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * id: 字符串，图层名</span><br><span class="line"> * x，y，z: 瓦片坐标</span><br><span class="line"> * len: buffer长度</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">EXPORT <span class="keyword">char</span>* <span class="title">getTile</span><span class="params">(<span class="keyword">char</span>* id,<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> l,<span class="keyword">int</span>* len)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//此处是别人的逻辑代码，这里用打开文件模拟。</span></span><br><span class="line">	FILE *fin = fopen(<span class="string">"a.jpg"</span>, <span class="string">"rb"</span>);</span><br><span class="line">	<span class="keyword">char</span>* buf = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line">	*len = fread(buf, <span class="number">1</span>, <span class="number">1024</span>*<span class="number">1024</span>, fin);</span><br><span class="line">	<span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们两方的平台（操作系统和vs）应该是一致的。</p>
<h2 id="方案">方案</h2><ol>
<li><p>原生模块法<br>用c++编写Node原生模块，在原生模块里面调用人家的dll。等于是在人家的dll外面再封装一层。该方法需要学习一下如何编写原生模块(addon)。</p>
</li>
<li><p>借助<a href="https://github.com/node-ffi/node-ffi" target="_blank" rel="external">node-fii</a><br>该方法虽然调用简单，但是实际使用起来坑比较多。也有环境的<a href="https://github.com/nodejs/node-gyp#installation" target="_blank" rel="external">依赖</a>。在node-ffi的目录下有简单的example可以参考。</p>
</li>
<li><p>其他方式（swig..）</p>
</li>
</ol>
<h2 id="任务">任务</h2><p>在本地自己写一个测试代码，生成一个dll,在Node环境中成功调用该dll.</p>
<h2 id="遇到的问题">遇到的问题</h2><p>目前使用node-ffi调用dll，遇到调用失败的问题。<br>以下是测试过程:<br><a href="https://cnodejs.org/topic/56570ec1b1e04fda51bcdf51" target="_blank" rel="external">https://cnodejs.org/topic/56570ec1b1e04fda51bcdf51</a></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.c</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"add.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add.h</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"add.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我用vs自带的命令行工具，参考node-ffi的example，<code>cl.exe /D_USRDLL /D_WINDLL F:\TestSpace\ffi\test\add.c /link /DLL /OUT:F:\TestSpace\ffi\test\add.dll</code> 这样生成的dll在node里面用ffi调用是没问题的，正确输出了6：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">var</span> ffi = <span class="built_in">require</span>(<span class="string">'ffi'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> libm = ffi.Library(__dirname+<span class="string">'\\add.dll'</span>, &#123;</span><br><span class="line">  <span class="string">'add'</span>: [ <span class="string">'int'</span>, [ <span class="string">'int'</span>,<span class="string">'int'</span> ] ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> a = libm.add(<span class="number">1</span>,<span class="number">5</span>); <span class="comment">// 输出6</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>
<p>但是我用VS IDE新建dll项目生成出来的Dll,用上面的方法调的时候，出现了这样的错误提示：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test&gt;node app.js</span><br><span class="line"></span><br><span class="line"><span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test\node_modules\ffi\<span class="class"><span class="keyword">lib</span>\<span class="title">dynamic_library</span>.<span class="title">js</span>:74</span></span><br><span class="line">    throw new <span class="constant">Error</span>(<span class="string">'Dynamic Linking Error: '</span> + err)</span><br><span class="line">          ^</span><br><span class="line"><span class="constant">Error</span>: <span class="constant">Dynamic</span> <span class="constant">Linking</span> <span class="constant">Error</span>: <span class="constant">Win32</span> error <span class="number">193</span></span><br><span class="line">    at new <span class="constant">DynamicLibrary</span> (<span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test\node_modules\ffi\<span class="class"><span class="keyword">lib</span>\<span class="title">dynamic_li</span></span></span><br><span class="line">brary.<span class="symbol">js:</span><span class="number">74</span>:<span class="number">11</span>)</span><br><span class="line">    at <span class="constant">Object</span>.<span class="constant">Library</span> (<span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test\node_modules\ffi\<span class="class"><span class="keyword">lib</span>\<span class="title">library</span>.<span class="title">js</span>:45:</span></span><br><span class="line"><span class="number">12</span>)</span><br><span class="line">    at <span class="constant">Object</span>.&lt;anonymous&gt; (<span class="constant">F</span>:\<span class="constant">TestSpace</span>\ffi\test\app.<span class="symbol">js:</span><span class="number">3</span>:<span class="number">16</span>)</span><br><span class="line">    at <span class="constant">Module</span>._compile (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:456:26)</span></span><br><span class="line">    at <span class="constant">Object</span>.<span class="constant">Module</span>._extensions..js (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:474:10)</span></span><br><span class="line">    at <span class="constant">Module</span>.load (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:356:32)</span></span><br><span class="line">    at <span class="constant">Function</span>.<span class="constant">Module</span>._load (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:312:12)</span></span><br><span class="line">    at <span class="constant">Function</span>.<span class="constant">Module</span>.runMain (<span class="class"><span class="keyword">module</span>.<span class="title">js</span>:497:10)</span></span><br><span class="line">    at startup (node.<span class="symbol">js:</span><span class="number">119</span>:<span class="number">16</span>)</span><br><span class="line">    at node.<span class="symbol">js:</span><span class="number">935</span>:<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>我在node-ffi的issue里提了一个<a href="https://github.com/node-ffi/node-ffi/issues/237" target="_blank" rel="external">问题</a>,作者说我编译生成dll的时候出问题了，应该是我用VS的方式有问题，难道不是新建一个空的dll项目然后生成解决方案？<br>跪求高手解救。。</p>
<h2 id="解决方法">解决方法</h2><p>原来我在VS中创建的项目是win32项目，必须将项目设置为x64项目。我的机器是win7 64位，Node是0.10.40的64位。改变设置之后，生成的dll能与使用cl.exe v64生成的一样在Node中成功调用。纠结了这么久，终于。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[todo-list]]></title>
      <url>http://www.18710847003.com/2015/10/25/todo-list/</url>
      <content type="html"><![CDATA[<h2 id="学习ES6">学习ES6</h2><p><a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="external">阮一峰的博客</a><br>最新版的node4.x貌似支持es6语法</p>
<h2 id="学习Sass">学习Sass</h2><p><a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="external">w3cplus</a><br><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="external">阮一峰的博客</a></p>
<h2 id="webpack">webpack</h2><h2 id="react">react</h2><h2 id="gulp">gulp</h2><h2 id="CSS">CSS</h2><p>具备将一张psd图转化成html+css代码的能力</p>
]]></content>
    </entry>
    
  
  
</search>
